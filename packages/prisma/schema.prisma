// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model DeployedWallet {
    id         String           @id @default(cuid())
    canisterId String           @unique @map("canister_id")
    name       String
    status     DeploymentStatus @default(DEPLOYING)
    metadata   Json?
    wasmHash   String?          @map("wasm_hash")
    createdAt  DateTime         @default(now()) @map("created_at")
    updatedAt  DateTime         @updatedAt @map("updated_at")

    signers WalletSigner[]
    chains  WalletChain[]
    txs     Transaction[]

    @@map("deployed_wallets")
}

model WalletChain {
    canisterId  String   @map("canister_id")
    chainId     String   @map("chain_id")
    chainName   String   @map("chain_name")
    displayName String   @map("display_name") // User custom name
    evmAddress  String   @map("evm_address") // Derived address
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")

    wallet DeployedWallet @relation(fields: [canisterId], references: [canisterId], onDelete: Cascade)

    @@id([canisterId, chainId])
    @@map("wallet_chain")
}

model User {
    id          String   @id @default(cuid())
    principal   String   @unique
    address     String?
    displayName String?  @map("display_name")
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")

    walletSigners WalletSigner[]

    @@map("users")
}

model WalletSigner {
    id         String         @id @default(cuid())
    canisterId String         @map("canister_id")
    userId     String         @map("user_id")
    wallet     DeployedWallet @relation(fields: [canisterId], references: [canisterId])
    user       User           @relation(fields: [userId], references: [id])

    @@unique([canisterId, userId])
    @@map("wallet_signers")
}

model Transaction {
    id         String            @id @default(cuid())
    canisterId String            @map("canister_id")
    type       TransactionType
    status     TransactionStatus @default(DRAFT)
    data       Json

    description String?
    createdBy   String    @map("created_by")
    createdAt   DateTime  @default(now()) @map("created_at")
    updatedAt   DateTime  @updatedAt @map("updated_at")
    executedAt  DateTime? @map("executed_at")

    // Relations
    wallet DeployedWallet @relation(fields: [canisterId], references: [canisterId])

    @@map("transactions")
}

enum DeploymentStatus {
    DEPLOYING
    DEPLOYED
    FAILED
    STOPPED
}

enum TransactionStatus {
    DRAFT // Created but not proposed
    PROPOSED // Sent to canister for approval
    EXECUTED // Completed
    FAILED // Failed
}

enum TransactionType {
    ICP_TRANSFER
    EVM_TRANSFER
}
